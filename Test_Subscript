// bigint Test Program
//
// Tests:  subscript, uses ==
//
#include <iostream>
#include <cassert>
#include "bigint.hpp"

//===========================================================================
int main () {

  //One digit test
    {
        // Setup
        bigint bi(4);

        // Test
        int digit = bi[0];

        // Verify
        assert(bi == 4);  //Wrong.  Will FAIL.  Fix and add test cases. FIXED
        assert(digit == 4);
    }

    //Lower bound test
    {
      //Setup
      bigint bi(0);

      //Test
      int digit = bi[0];

      //Verify
      assert(bi == 0);
      assert(digit == 0);
    }

    //One digit test
    {
      //Setup
      bigint bi(6);

      //Test
      int digit = bi[0];

      //Verify
 assert(bi == 6);
      assert(digit == 6);
    }

    //Double digit test
    {
      //Setup
      bigint bi(12);

      //Test
      int digit = bi[0];
      int digit2 = bi[1];

      //Verify
      assert(bi == 12);
      assert(digit == 2);
      assert(digit2 == 1);
    }

    //Multi digit test
    {
      //Setup
      bigint bi(225); //bi is object of bigint
  //Test
      int digit = bi[0];
      int digit2 = bi[1];
      int digit3 = bi[2];

      //Verify
      assert(bi == 225);
      assert(digit == 5);
      assert(digit2 == 2);
      assert(digit3 == 2);

    }

    //upper bound test
    {
      //setup
      bigint bi(500);

      //test
      int digit = bi[0];
      int digit2 = bi[1];
      int digit3 = bi[2];
   //Verify
      assert(bi == 500);
      assert(digit == 0);
      assert(digit2 == 0);
      assert(digit3 == 5);
    }

    //character test
    {
      //setup
      bigint bi("12345");

      //test
      int digit = bi[0];
      int digit2 = bi[1];
      int digit3 = bi[2];
      int digit4 = bi[3];
      int digit5 = bi[4];

      //verify
      assert(bi == 12345);
      assert(bi == "12345");
     assert(digit == 5);
      assert(digit2 == 4);
      assert(digit3 == 3);
      assert(digit4 == 2);
      assert(digit5 == 1);
    }

    std::cout << "Done testing subscript." << std::endl;
}
